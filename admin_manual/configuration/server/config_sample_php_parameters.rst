=====================
Config.php Parameters
=====================

ownCloud uses the ``config/config.php`` file to control server operations.
``config/config.sample.php`` lists all the configurable parameters within
ownCloud, along with example or default values. This document provides a more
detailed reference. Most options are configurable on your Admin page, so it
is usually not necessary to edit ``config/config.php``.

.. note:: The installer creates a configuration containing the essential parameters.
   Only manually add configuration parameters to ``config/config.php`` if you need to
   use a special value for a parameter. **Do not copy everything from**
   ``config/config.sample.php`` **. Only enter the parameters you wish to modify!**

ownCloud supports loading configuration parameters from multiple files.
You can add arbitrary files ending with :file:`.config.php` in the :file:`config/`
directory, for example you could place your email server configuration
in :file:`email.config.php`. This allows you to easily create and manage
custom configurations, or to divide a large complex configuration file 
into a set of smaller files. These custom files are not overwritten by 
ownCloud, and the values in these files take precedence over :file:`config.php`.

.. The following section is auto-generated from 
.. https://github.com/owncloud/core/blob/master/config/config.sample.php
.. Do not edit this file; edit the source file in core
.. DEFAULT_SECTION_START


.. DEFAULT_SECTION_END
.. Generated content above. Don't change this.

Default config.php Examples
---------------------------

When you use SQLite as your ownCloud database, your ``config.php`` looks like
this after installation. The SQLite database is stored in your ownCloud
``data/`` directory. SQLite is a simple, lightweight embedded database that
is good for testing and for simple installations, but for production ownCloud
systems you should use MySQL, MariaDB, or PostgreSQL.

.. literalinclude:: examples/config_sample_php_parameters/default-config-sample-sqlite.php
   :language: php

This example is from a new ownCloud installation using MariaDB

.. literalinclude:: examples/config_sample_php_parameters/default-config-sample-mariadb.php
   :language: php

.. Generated content below. Don't change this.
.. ALL_OTHER_SECTIONS_START


.. ALL_OTHER_SECTIONS_END
.. Generated content above. Don't change this.

App config options
------------------

Retention for activities of the activity app:


.. code-block:: php

	'activity_expire_days' => 365,

Every day a cron job is ran, which deletes all activities for all users
which are older then the number of days that is set for ``activity_expire_days``

.. code-block:: php

	'smb.logging.enable' => true,

This enables debug logging for SMB access.
Use this carefully as it can generate a huge amount of log data.

Overriding Existing Parameter Values Using Environment Variables
----------------------------------------------------------------

ownCloud supports the ability to override the *web UI*, *command line*, and *Cron* environment settings by using environment variables.
By doing so, you avoid the need to store credentials and other sensitive data in code. 
Whatâ€™s more, by using environment variables, you do not have to manage configurations (e.g., database connections) for different server environments, because environment variables store this information for you.

To override an existing setting, you need to export an environment variable which has the same name as the one which you want to override, prefixed with ``OC_``. 
For example, if you wanted to override the value of ``dbname``, you would set the environment variable ``OC_dbname``.

Below are examples of setting an environment variable in the Apache and Nginx
web servers, and for when running command line scripts. 

Apache Web Server
~~~~~~~~~~~~~~~~~

::

  # Inside a virtual host configuration
  SetEnv OC_dbname owncloud_database_name
  
Nginx Web Server (php-fpm)
~~~~~~~~~~~~~~~~~~~~~~~~~~

::

  location / {
      fastcgi_param OC_dbname owncloud_database_name
  }

Command Line
~~~~~~~~~~~~

::

  # export the variable into the environment before launching the Cron script
  export OC_dbname=owncloud_database_name php -d variables_order=EGPCS cron.php

.. Links
   
.. _environment variables: https://12factor.net/config 
.. _phpredis' Redis Cluster documentation: https://github.com/phpredis/phpredis/blob/develop/cluster.markdown
     
